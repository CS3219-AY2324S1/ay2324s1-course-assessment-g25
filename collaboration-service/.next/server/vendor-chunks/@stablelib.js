"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stablelib";
exports.ids = ["vendor-chunks/@stablelib"];
exports.modules = {

/***/ "(rsc)/./node_modules/@stablelib/base64/lib/base64.js":
/*!******************************************************!*\
  !*** ./node_modules/@stablelib/base64/lib/base64.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n/**\n * Package base64 implements Base64 encoding and decoding.\n */ // Invalid character used in decoding to indicate\n// that the character to decode is out of range of\n// alphabet and cannot be decoded.\nvar INVALID_BYTE = 256;\n/**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */ var Coder = /** @class */ function() {\n    // TODO(dchest): methods to encode chunk-by-chunk.\n    function Coder(_paddingCharacter) {\n        if (_paddingCharacter === void 0) {\n            _paddingCharacter = \"=\";\n        }\n        this._paddingCharacter = _paddingCharacter;\n    }\n    Coder.prototype.encodedLength = function(length) {\n        if (!this._paddingCharacter) {\n            return (length * 8 + 5) / 6 | 0;\n        }\n        return (length + 2) / 3 * 4 | 0;\n    };\n    Coder.prototype.encode = function(data) {\n        var out = \"\";\n        var i = 0;\n        for(; i < data.length - 2; i += 3){\n            var c = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n            out += this._encodeByte(c >>> 3 * 6 & 63);\n            out += this._encodeByte(c >>> 2 * 6 & 63);\n            out += this._encodeByte(c >>> 1 * 6 & 63);\n            out += this._encodeByte(c >>> 0 * 6 & 63);\n        }\n        var left = data.length - i;\n        if (left > 0) {\n            var c = data[i] << 16 | (left === 2 ? data[i + 1] << 8 : 0);\n            out += this._encodeByte(c >>> 3 * 6 & 63);\n            out += this._encodeByte(c >>> 2 * 6 & 63);\n            if (left === 2) {\n                out += this._encodeByte(c >>> 1 * 6 & 63);\n            } else {\n                out += this._paddingCharacter || \"\";\n            }\n            out += this._paddingCharacter || \"\";\n        }\n        return out;\n    };\n    Coder.prototype.maxDecodedLength = function(length) {\n        if (!this._paddingCharacter) {\n            return (length * 6 + 7) / 8 | 0;\n        }\n        return length / 4 * 3 | 0;\n    };\n    Coder.prototype.decodedLength = function(s) {\n        return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n    };\n    Coder.prototype.decode = function(s) {\n        if (s.length === 0) {\n            return new Uint8Array(0);\n        }\n        var paddingLength = this._getPaddingLength(s);\n        var length = s.length - paddingLength;\n        var out = new Uint8Array(this.maxDecodedLength(length));\n        var op = 0;\n        var i = 0;\n        var haveBad = 0;\n        var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n        for(; i < length - 4; i += 4){\n            v0 = this._decodeChar(s.charCodeAt(i + 0));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = v0 << 2 | v1 >>> 4;\n            out[op++] = v1 << 4 | v2 >>> 2;\n            out[op++] = v2 << 6 | v3;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n            haveBad |= v2 & INVALID_BYTE;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (i < length - 1) {\n            v0 = this._decodeChar(s.charCodeAt(i));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            out[op++] = v0 << 2 | v1 >>> 4;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n        }\n        if (i < length - 2) {\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            out[op++] = v1 << 4 | v2 >>> 2;\n            haveBad |= v2 & INVALID_BYTE;\n        }\n        if (i < length - 3) {\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = v2 << 6 | v3;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (haveBad !== 0) {\n            throw new Error(\"Base64Coder: incorrect characters for decoding\");\n        }\n        return out;\n    };\n    // Standard encoding have the following encoded/decoded ranges,\n    // which we need to convert between.\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n    //\n    // Encode 6 bits in b into a new character.\n    Coder.prototype._encodeByte = function(b) {\n        // Encoding uses constant time operations as follows:\n        //\n        // 1. Define comparison of A with B using (A - B) >>> 8:\n        //          if A > B, then result is positive integer\n        //          if A <= B, then result is 0\n        //\n        // 2. Define selection of C or 0 using bitwise AND: X & C:\n        //          if X == 0, then result is 0\n        //          if X != 0, then result is C\n        //\n        // 3. Start with the smallest comparison (b >= 0), which is always\n        //    true, so set the result to the starting ASCII value (65).\n        //\n        // 4. Continue comparing b to higher ASCII values, and selecting\n        //    zero if comparison isn't true, otherwise selecting a value\n        //    to add to result, which:\n        //\n        //          a) undoes the previous addition\n        //          b) provides new value to add\n        //\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += 25 - b >>> 8 & 0 - 65 - 26 + 97;\n        // b > 51\n        result += 51 - b >>> 8 & 26 - 97 - 52 + 48;\n        // b > 61\n        result += 61 - b >>> 8 & 52 - 48 - 62 + 43;\n        // b > 62\n        result += 62 - b >>> 8 & 62 - 43 - 63 + 47;\n        return String.fromCharCode(result);\n    };\n    // Decode a character code into a byte.\n    // Must return 256 if character is out of alphabet range.\n    Coder.prototype._decodeChar = function(c) {\n        // Decoding works similar to encoding: using the same comparison\n        // function, but now it works on ranges: result is always incremented\n        // by value, but this value becomes zero if the range is not\n        // satisfied.\n        //\n        // Decoding starts with invalid value, 256, which is then\n        // subtracted when the range is satisfied. If none of the ranges\n        // apply, the function returns 256, which is then checked by\n        // the caller to throw error.\n        var result = INVALID_BYTE; // start with invalid character\n        // c == 43 (c > 42 and c < 44)\n        result += (42 - c & c - 44) >>> 8 & -INVALID_BYTE + c - 43 + 62;\n        // c == 47 (c > 46 and c < 48)\n        result += (46 - c & c - 48) >>> 8 & -INVALID_BYTE + c - 47 + 63;\n        // c > 47 and c < 58\n        result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;\n        // c > 64 and c < 91\n        result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;\n        // c > 96 and c < 123\n        result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;\n        return result;\n    };\n    Coder.prototype._getPaddingLength = function(s) {\n        var paddingLength = 0;\n        if (this._paddingCharacter) {\n            for(var i = s.length - 1; i >= 0; i--){\n                if (s[i] !== this._paddingCharacter) {\n                    break;\n                }\n                paddingLength++;\n            }\n            if (s.length < 4 || paddingLength > 2) {\n                throw new Error(\"Base64Coder: incorrect padding\");\n            }\n        }\n        return paddingLength;\n    };\n    return Coder;\n}();\nexports.Coder = Coder;\nvar stdCoder = new Coder();\nfunction encode(data) {\n    return stdCoder.encode(data);\n}\nexports.encode = encode;\nfunction decode(s) {\n    return stdCoder.decode(s);\n}\nexports.decode = decode;\n/**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */ var URLSafeCoder = /** @class */ function(_super) {\n    __extends(URLSafeCoder, _super);\n    function URLSafeCoder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // URL-safe encoding have the following encoded/decoded ranges:\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n    //\n    URLSafeCoder.prototype._encodeByte = function(b) {\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += 25 - b >>> 8 & 0 - 65 - 26 + 97;\n        // b > 51\n        result += 51 - b >>> 8 & 26 - 97 - 52 + 48;\n        // b > 61\n        result += 61 - b >>> 8 & 52 - 48 - 62 + 45;\n        // b > 62\n        result += 62 - b >>> 8 & 62 - 45 - 63 + 95;\n        return String.fromCharCode(result);\n    };\n    URLSafeCoder.prototype._decodeChar = function(c) {\n        var result = INVALID_BYTE;\n        // c == 45 (c > 44 and c < 46)\n        result += (44 - c & c - 46) >>> 8 & -INVALID_BYTE + c - 45 + 62;\n        // c == 95 (c > 94 and c < 96)\n        result += (94 - c & c - 96) >>> 8 & -INVALID_BYTE + c - 95 + 63;\n        // c > 47 and c < 58\n        result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;\n        // c > 64 and c < 91\n        result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;\n        // c > 96 and c < 123\n        result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;\n        return result;\n    };\n    return URLSafeCoder;\n}(Coder);\nexports.URLSafeCoder = URLSafeCoder;\nvar urlSafeCoder = new URLSafeCoder();\nfunction encodeURLSafe(data) {\n    return urlSafeCoder.encode(data);\n}\nexports.encodeURLSafe = encodeURLSafe;\nfunction decodeURLSafe(s) {\n    return urlSafeCoder.decode(s);\n}\nexports.decodeURLSafe = decodeURLSafe;\nexports.encodedLength = function(length) {\n    return stdCoder.encodedLength(length);\n};\nexports.maxDecodedLength = function(length) {\n    return stdCoder.maxDecodedLength(length);\n};\nexports.decodedLength = function(s) {\n    return stdCoder.decodedLength(s);\n}; //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@stablelib/base64/lib/base64.js\n");

/***/ })

};
;
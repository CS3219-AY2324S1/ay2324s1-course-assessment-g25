"use client";

import { Button, LinkButton } from "../primitives/Button";

import clsx from "clsx";
import { getServerSession } from "next-auth/next";
import { signIn } from "next-auth/react";
import { SignInIcon } from "../icons";
import { NavigationLayout } from "../layouts/Navigation";
import { Container } from "../primitives/Container";
import { authOptions } from "./api/auth/[...nextauth]";
import styles from "./page.module.css";

function Feature({
  title,
  description,
  className,
  ...props
}) {
  return (
    <div className={clsx(className, styles.featuresFeature)} {...props}>
      <h4 className={styles.featuresFeatureTitle}>{title}</h4>
      <p className={styles.featuresFeatureDescription}>{description}</p>
    </div>
  );
}

export const metadata = {
  title: "PeerPrep",
  description: "Generated by create next app",
};

export default function Home() {
  return (
    <>
      <NavigationLayout>
        <Container className={styles.section}>
          <div className={styles.heroInfo}>
            <h1 className={styles.heroTitle}>
              Kickstart your collaborative&nbsp;app
            </h1>
            <p className={styles.heroLead}>
              Use the Liveblocks Starter Kit to build your document-based
              collaborative app in&nbsp;minutes.
            </p>
          </div>
          <div className={styles.heroActions}>
            <Button icon={<SignInIcon />} onClick={() => signIn()}>
              Sign in
            </Button>
            <LinkButton
              href="https://github.com/CS3219-AY2324S1/ay2324s1-course-assessment-g25"
              target="_blank"
              variant="secondary"
            >
              Learn more
            </LinkButton>
          </div>
        </Container>
        <Container className={styles.section}>
          <h2 className={styles.sectionTitle}>Features</h2>
          <div className={styles.featuresGrid}>
            <Feature
              description={
                <>
                  A collaborative whiteboard app with included share menu,
                  documents listing, users, groups, permissions, and more.
                </>
              }
              title="Liveblocks"
            />
            <Feature
              description={
                <>
                  Best practices followed, using a mixture of SSR and custom API
                  endpoints. Modify documents from both client and server.
                </>
              }
              title="Next.js"
            />
            <Feature
              description={
                <>
                  Adjust our reusable interface & design system to fit your needs.
                </>
              }
              title="User Interface"
            />
            <Feature
              description={
                <>
                  All custom client and server functions are fully typed, and easy
                  to update.
                </>
              }
              title="TypeScript"
            />
            <Feature
              description={
                <>
                  Complete authentication, compatible with any NextAuth provider,
                  including GitHub, Google, Auth0, and many more.
                </>
              }
              title="NextAuth.js"
            />
            <Feature
              description={
                <>
                  See data update live using the SWR (state-while-revalidate)
                  library.
                </>
              }
              title="SWR"
            />
          </div>
        </Container>
      </NavigationLayout>
    </>
  );
}

// If logged in, redirect to dashboard
export const getServerSideProps = async ({ req, res }) => {
  const session = await getServerSession(req, res, authOptions);

  if (session) {
    return {
      redirect: {
        permanent: false,
        destination: "/home",
      },
    };
  }

  return {
    props: {},
  };
};
